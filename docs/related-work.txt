Group: Avinaash Gupta, Brandon Davis, Ramnatthan Alagappan

Related Work:

Active Disks [1][2] (and more recently Active Flash [3]) present a method for using on-disk computing resources to perform work remotely, in parallel, among all the distributed disks in a system. Using on-disk memory and CPU, data can be filtered or modified on a read or write, utilizing the aggregate processing power of the remote devices. This also spares the master server from performing the same operations on a much larger pool of data, and greatly reduces network bandwidth usage. Our work will similarly attempt to change the way that remote storage is accessed. Not all data has to be handled by the host making the request. However, while Active Disks require some hardware and firmware changes and/or the ability to download and execute (potentially dangerous) code, our solutions will probably focus more on a lightweight software library. Similarly, NASD [10] uses active disk strategy to pass the filtered variable size object rather than passing the complete block to the client.

Active Storage Fabrics [9] is a model for storage embedded parallel processing to address large scale data intensive challenges. It is, like Active Disks, aimed at emerging scalable system-on-chip, storage class memory architectures. The authors present a model where host workloads can be transparently accelerated by close integration at the middleware storage layers. Embedded Parallel Modules are the way to allow execution of function inside storage. The parallel modules described are highly scalable and hence can be used for wider range of data formats and functions to be storage embedded.

Active Messages [4] attempt to minimize communication overhead and allow communication to overlap computation. The header of an Active Message contains a pointer to a user-level handler. The body is the argument to this handler. Thus, as the server receives an Active Message, it can begin computation to service the request.

QuickSAN [5] presents a hardware solution to the problem of software overheads in remote storage access. By integrating network adapters into SSD devices, the servers and devices can communicate directly to service requests quickly. While QuickSAN uses these hardware changes to avoid kernel, file system, and block transport costs, our approach will, as mentioned above, attempt to reduce those same costs through software.

Object Storage [6] provides a summary of object stores which instead of exposing the block level interface to applications and file systems, exposes the storage in terms of objects. Object Storage involves a change in the lowest level of the storage stack - the hosts no more see the data as blocks rather as object identifiers and object offsets. ObjectStone is an extended implementation of the iSCSI initiator and target that supports OSD (object storage device) commands. While this work aims at exporting object storage on top of a block device, our work aims at addressing the small write problem which involves lot of block transfers across the host and storage.

Caulfield et al. [7] present user-level access to solid state devices to avoid the cost of entering the kernel. File system permissions checks are moved into the hardware. 4KB request latency was reduced by 58% and throughput increased by 7.6x. These numbers show the value of reducing software costs that have become the bottleneck for low-latency storage systems. Again, our approach comes from a software angle, and will also examine network overheads.

Bjorling et al. [8] debunks several myths about the performance of SSD devices. The block device interface was designed for HDD. It was perpetuated for SSD due to the belief or desire to believe that the drives behave similarly in respect to the lack of parallelism, the benefit of locality, and read vs write performance. In fact, SSD performs better than the non-volatile memory inside due to parallelism of banks, random writes are not much more costly than sequential writes, and reads are not necessarily cheaper than writes. The authors use database systems to promote a change from the block device interface. Our work may change that interface at the network level.

[1] Anurag Acharya, Mustafa Uysal, Joel Saltz. Active disks: programming model, algorithms and evaluation, ACM SIGPLAN Notices, v.33 n.11, p.81-91, Nov. 1998
[2] Riedel, E. and Gibson, G. Active Disks - Remote Execution for Network-Attached Storage. Technical Report CMU-CS-97-198, December 1997.
[3] S. Boboila, Y. Kim, S. S. Vazhkudai, P. Desnoyers, and G. M. Shipman. Active Flash: Out-of-core Data Analytics on Flash Storage. In MSST, 2012.
[4] Thorsten von Eicken, David E. Culler, Seth Copen Goldstein, Klaus Erik Schauser. Active messages: a mechanism for integrated communication and computation. Proceedings of the 19th Annual International Symposium on Computer Architecture, p.256-266, May 19-21, 1992, Queensland, Australia
[5] A. M. Caulfield and S. Swanson. Quicksan: a storage area network for fast, distributed, solid state disks.  In Proceedings of the 40th Annual International Symposium on Computer Architecture, ISCA '13, pages 464-474, New York, NY, USA, 2013. ACM.
[6] M. Factor, K. Meth, D. Naor, O. Rodeh, and J. Satran. Object Storage: the future building block for storage systems. In LGDI ’05: Proceedings of the 2005 IEEE International Symposium on Mass Storage Systems and Technology, pages 119–123, Washington, DC, USA, 2005. IEEE Computer Society.
[7] A. Caulfield, T. Mollov, L. Eisner, A. De, J. Coburn, S. Swanson. Providing safe, user space access to fast, solid state disks. ASPLOS 2012.
[8] Matias Bjorling, Philippe Bonnet, Luc Bouganim, Niv Dayan, et al. The necessary death of the block device interface. In 6th Biennial Conference on Innovative Data Systems Research (CIDR), 2013.
[9] Blake G Fitch, Aleksandr Rayshubskiy, Michael C Pitman, Christopher T J Ward, Robert S Germain Proceedings of the 4th Annual Workshop on Petascale Data Storage, pp. 47--54, ACM, 2009
[10] Gibson, G., et al. A cost-effective, high-bandwidth storage architecture. In Proceedings of the ACM 8th International Conference on Architectural Support for Programming Languages and Operating Systems (ASPLOS) (San Jose, Calif., Oct). ACM Press, New York, 1998, 92–103; see also www.pdl.cs.cmu.edu 
