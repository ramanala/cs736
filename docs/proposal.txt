Current access patterns to remote SSD devices incur various software and network overheads. Certain patterns of block accesses that were designed for a local block device are poorly suited for remote devices. For example, a single-byte write to a file block performed with a read-modify-write pattern would result in 2 blocks of data passed over the network (on the read and the write) when only 1 byte of data needed to be sent to the server. More broadly, any single request must travel through the kernel and network stack. It may be possible to bypass some of this software while still maintaining system security. These costs were previously hidden by high HDD latency, but as the use of low latency remote storage in data centers increases, they may become more prominent.

The problem we intend to solve is understanding the various costs related to remote SSD access under different workloads, and where they occur. With this information, new techniques may be developed which better suit the domain of remote storage.

We plan to measure various storage workloads using one or more baselines (e.g. local access, remote HDD etc.), and then with a low latency layer consisting of remote SSD connected by a back-to-back Infiniband link. Examination of the workload results may lead in the worst case to understanding which areas need improvement and in the best case to proposals and/or prototypes of new techniques in those areas.

Related Work:
Active Disks [1][2] (and more recently Active Flash [3]) present a method for using on-disk computing resources to perform work remotely, in parallel, among all the distributed disks in a system. Using on-disk memory and CPU, data can be filtered or modified on a read or write, utilizing the aggregate processing power of the remote devices. This also spares the master server from performing the same operations on a much larger pool of data, and greatly reduces network bandwidth usage. Our work will similarly attempt to change the way that remote storage is accessed. Not all data has to be handled by the host making the request. However, while Active Disks require some hardware and firmware changes and/or the ability to download and execute (potentially dangerous) code, our solutions will probably focus more on a lightweight software library.

Active Messages [4] attempt to minimize communication overhead and allow communication to overlap computation. The header of an Active Message contains a pointer to a user-level handler. The body is the argument to this handler. Thus, as the server receives an Active Message, it can begin computation to service the request.

QuickSAN [5] presents a hardware solution to the problem of software overheads in remote storage access. By integrating network adapters into SSD devices, the servers and devices can communicate directly to service requests quickly. While QuickSAN uses these hardware changes to avoid kernel, file system, and block transport costs, our approach will, as mentioned above, attempt to reduce those same costs through software.


[1] Anurag Acharya, Mustafa Uysal, Joel Saltz. Active disks: programming model, algorithms and evaluation, ACM SIGPLAN Notices, v.33 n.11, p.81-91, Nov. 1998
[2] Riedel, E. and Gibson, G. Active Disks - Remote Execution for Network-Attached Storage. Technical Report CMU-CS-97-198, December 1997.
[3] S. Boboila, Y. Kim, S. S. Vazhkudai, P. Desnoyers, and G. M. Shipman. Active Flash: Out-of-core Data Analytics on Flash Storage. In MSST, 2012.
[4] Thorsten von Eicken, David E. Culler, Seth Copen Goldstein, Klaus Erik Schauser. Active messages: a mechanism for integrated communication and computation. Proceedings of the 19th Annual International Symposium on Computer Architecture, p.256-266, May 19-21, 1992, Queensland, Australia
[5] A. M. Caulfield and S. Swanson. Quicksan: a storage area network for fast, distributed, solid state disks.  In Proceedings of the 40th Annual International Symposium on Computer Architecture, ISCA '13, pages 464-474, New York, NY, USA, 2013. ACM.
